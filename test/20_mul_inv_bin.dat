// Calculate a^(-1) mod n
//
// a and n store in memory @1024, 1025
//
// Result store at R1, memory 1026

@0
0100010_10000_00000__000010000000000  // ADI R16, R0, 1024
0100010_10001_10000__000000000000001  // ADI R17, R16, 1
0010000_00010_10000__000000000000000  // LD R2 = M[R16]
0010000_00011_10001__000000000000000  // LD R3 = M[R17]
1000000_00001_00000__000000000000000  // R1 = R0
1000000_00100_00011__000000000000000  // R4 = R3
0100101_00100_00100__000000000000001  // R4 = R4 - 1
1100000_00000_00100__000000000001101  // BZ R4, 13

1000000_00110_00100__000000000000000  // R6 = R4
1000000_00111_00000__000000000000000  // R7 = R0
0100101_00110_00110__000000000000001  // R6 = R6 - 1
0000010_00111_00111_00010_0000000000  // R7 = R7 + R2
1100000_00000_00110__000000000000001  // BZ R6, 1
1101000_00000_00000__111111111111100  // JMP -4

1100101_01011_00011_00111_0000000000  // SLT R11, R3, R7
1100000_00000_01011__000000000000010  // BZ R11, 2
0000101_00111_00111_00011_0000000000  // R7 = R7 - R3
1101000_00000_00000__111111111111100  // JMP -4

0100101_01100_00111__000000000000001  // R12 = R7 - 1
1100000_00000_01100__000000000000001  // BZ R12, 1
1101000_00000_00000__111111111110001  // JMP -15

1000000_00001_00100__000000000000000  // R1 = R4
0100010_01111_00000__000010000000010  // R15 = 1026
0100000_00000_01111_00001_0000000000  // M[R15] = R1
1111111_11111_11111_11111_1111111111  // halt
1111111_11111_11111_11111_1111111111  // halt
1111111_11111_11111_11111_1111111111  // halt
1111111_11111_11111_11111_1111111111  // halt
1111111_11111_11111_11111_1111111111  // halt
